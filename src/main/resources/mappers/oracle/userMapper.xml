<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.oracle.userMapper">
	<sql id="users_all_column">
		NUM,ID,PW,F_NAME,S_NAME,EMAIL,IS_EMAIL_DIRECT,REG_DATE,LOGIN_IP,LAST_LOGIN_DATE,IS_AUTHORIZED,IS_ADMIN
	</sql>
	
	<select id="selectUserCountById" parameterType="String" resultType="int">
		select count(ID)
		  from USERS
		 where ID = #{id}
	</select>
	
	<insert id="insertUser" parameterType="User">
		<selectKey keyColumn="NUM" keyProperty="num" resultType="Integer" order="BEFORE">
			select USERS_SEQ.nextval from dual
		</selectKey>
		insert into USERS(
			NUM, ID, PW, F_NAME, S_NAME,EMAIL,IS_AUTHORIZED, IS_ADMIN, REG_DATE, LAST_LOGIN_DATE, LOGIN_IP, IS_EMAIL_DIRECT
		)
		values (
			#{num}, #{id}, #{pw}, #{fName}, #{sName}, #{email}, #{authorized, typeHandler=yesNoTypeHandler}, #{admin, typeHandler=yesNoTypeHandler}, sysdate, sysdate, #{loginIP}, #{emailDirect, typeHandler=yesNoTypeHandler}
		)
	</insert>
	
	<select id="selectUserById" parameterType="String" resultMap="RM_Users">
		select <include refid="users_all_column" />
		  from USERS
		 where ID = #{id}
	</select>
	
	<select id="selectTotalUsersCnt" parameterType="map" resultType="int">
		select count(NUM)
		  from USERS
		<where>
		<if test="status != 'A'.toString()">
		  	and IS_AUTHORIZED = #{status}
		</if>
		<if test="userName != null and userName != ''.toString()">
		  	and S_NAME like '%' || #{userName} || '%'
		</if>
		</where>
	</select>
	
	<select id="selectTotalUsersCntNoParams" resultType="int">
		select count(NUM)
		  from USERS
	</select>
	
	<select id="selectUsers" parameterType="Page" resultMap="RM_Users">
		select <include refid="users_all_column" />, RN
		  from (
				select <include refid="users_all_column" />,
					   row_number() over(order by S_NAME) as RN
				  from USERS
		  )
		  where RN between #{startCount} and #{endCount}
	</select>
	
	<select id="selectUserByAuthOrName" parameterType="map" resultMap="RM_Users">
		select <include refid="users_all_column" />, RN
		  from (
				select <include refid="users_all_column" />,
					   row_number() over(order by S_NAME) as RN
				  from USERS
				  <where>
				  	<if test="status != 'A'.toString()">
				  	and IS_AUTHORIZED = #{status}
				  	</if>
				  	<if test="userName != null and userName != ''.toString()">
				  	and S_NAME like '%' || #{userName} || '%'
				  	</if>
				  </where>
		   )
		 where RN between #{page.startCount} and #{page.endCount}  
	</select>
	
	<resultMap type="User" id="RM_Users">
		<id property="num"					column="NUM"/>
		<result property="id"				column="id" />
		<result property="fName"			column="F_NAME" />
		<result property="sName"			column="S_NAME" />
		<result property="email"			column="EMAIL" />
		<result property="emailDirect"		column="IS_EMAIL_DIRECT" typeHandler="yesNoTypeHandler" />
		<result property="loginIP"			column="LOGIN_IP" />
		<result property="regDate"			column="REG_DATE" />
		<result property="lastLoginDate"	column="LAST_LOGIN_DATE" />
		<result property="authorized"		column="IS_AUTHORIZED"	typeHandler="yesNoTypeHandler" />
		<result property="admin"			column="IS_ADMIN" typeHandler="yesNoTypeHandler" />
	</resultMap>
	
	<update id="updateForUserLogin" parameterType="User">
		update USERS
		   set LOGIN_IP = #{loginIP},
		   	   LAST_LOGIN_DATE = sysdate
		 where ID = #{id}
	</update>
	
	<update id="updateUserAccount" parameterType="User">
		update USERS
		   set S_NAME = #{sName},
		   	   F_NAME = #{fName},
		   	   EMAIL = #{email},
		   	   IS_EMAIL_DIRECT = #{emailDirect, typeHandler=yesNoTypeHandler}
		 where ID = #{id}
	</update>
	
	<resultMap type="java.util.HashMap" id="RM_selectUserAuthStatistics">
		<result javaType="java.lang.String"	column="AUTH"	property="auth" />
		<result javaType="java.lang.String" column="CNT"	property="cnt" />
	</resultMap>
	
	<select id="selectUserAuthStatistics" resultMap="RM_selectUserAuthStatistics">
		select is_authorized as AUTH,
			   count(is_authorized) as CNT
  		  from USERS
      	  group by is_authorized  
	</select>
	
	<update id="updateUserUnlock" parameterType="String">
		update USERS
		   set IS_AUTHORIZED = 'Y'
		 where NUM = #{num}
	</update>
 	
 	<select id="selectUsersForProjectMember" resultType="map">
 		select NUM, ID, S_NAME, F_NAME
 		  from USERS
 		 where IS_AUTHORIZED = 'Y'
 	</select>
</mapper>